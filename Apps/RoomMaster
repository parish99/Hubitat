
 definition(
    name		: "RoomMaster",
    namespace	: "Parish",
    author		: "Parish",
    description	: "Room Manager",
    category	: "My Apps",
    iconUrl		: "",
    iconX2Url	: "",
	iconX3Url	: ""
    )


preferences {page(name: "pageConfig")}
// Doing it this way elimiates the default app name/mode options.

def pageConfig(){
    dynamicPage(name: "", title: "", install: true, uninstall: true, refreshInterval:0){

    section("HVAC Setup"){
		input name : "tStat", type : "capability.thermostat", title: "Main Household thermostat", required: true
		input name : "isACcapable", title : "System is AC capable", multiple : false ,required : true, type	: "bool" ,submitOnChange : true, defaultValue : true
	    input name : "blowerRun", type : "capability.contactSensor", title: "Blower Running Input", required: false
        input name : "staticPres", type : "capability.contactSensor", title: "Static Pressure Overpressure Swtich", required: false
        input "targetArea", "number", title: "Enter The Target Area in²:", defaultValue: 300, submitOnChange: true
        input "staticValue", "number", title: "Enter The Total in² of static vents:", defaultValue: 0, submitOnChange: true
    }
        
    section("Rooms"){
		if (installed){
		section("Rooms"){
            app(name: "childRooms", appName: "Room", namespace: "Parish", title: "Create New Room...", multiple: true)
        }
        }	
    }
        
    section("Logging")
	    {input(
		name : "logLevel"
		,title : "IDE logging level" 
		,multiple : false
		,required : true
		,type : "enum"
		,options  : getLogLevels()
		,submitOnChange : false
		,defaultValue : "0")  
	}     
	}
}

//=========================================================================
def installed() {
    initialize()
}
def updated() {
    initialize()
}
def initialize() {
	infolog "Initializing"
    unsubscribe()
    debuglog "Getting Thermostat running State" 
    subscribe(tStat, "thermostatOperatingState", OperatingStateHandler)  
    subscribe(blowerRun, "contact", blowerHandler) 
	state.mainState = state.mainState ?: getMainTstatState()
    debuglog "Getting Blower State "
    state.blowerRun = blowerRun.currentValue("contact")
    debuglog "There are ${childApps.size()} installed child apps"
    state.remove("roomMap")
    state.roomMap = [:]
    
    childApps.each {child ->
    debuglog "Child app: ${child.label}"
    state.childTemps= [:]
    state.childSetpoints= [:]
    state.childVentSize= [:]
    state.childDelta= [:]
    //debuglog "Remove State rooms"
    //state.remove("rooms")
    //state.remove("childVentOpenings")
    }  
    
    subscribe(tStat, "thermostatMode", setTstatMode)
	debuglog "Getting local virtual Thermostat thermostatMode" 
	state.thermostatMode = tStat.currentValue("thermostatMode").toUpperCase()
}

def setTstatMode(evt){
	infolog "Running setTstatMode"
	state.thermostatMode = evt.value.toUpperCase()
    debuglog "Sending TStat Change to Zones ${state.thermostatMode}"
	    childApps.each {child -> 
            child.MainTstatStateChange(state.thermostatMode)}
}

def getMainTstatState(){
	def TstatState = tStat.currentValue("thermostatOperatingState")
	if (TstatState!=null){TstatState = TstatState.toUpperCase()}
    else {TstatState = "NULL"}
    debuglog "getMainTstatState Main TstatState : ${TstatState}"
	return TstatState
}

def OperatingStateHandler(evt){
	debuglog "OperatingStateHandler event : ${evt}"
	def newTstatState = evt.value.toUpperCase()
	if (newTstatState != state.mainState){
		state.mainState = newTstatState
		//SendTstatStateChange()
    }
}

/*
def SendTstatStateChange(){
	debuglog "Sending TStat Change to Zones ${state.thermostatMode}"
	    childApps.each {child -> 
            child.MainTstatStateChange(state.thermostatMode)}
}
*/

def blowerHandler(evt){
    debuglog "Blower Run event : ${evt}"
    state.blowerRun = evt.value
}

// Called from child during init
def HVACmode(){
    //return state.blowerRun
    return state.thermostatMode
}


// Called from child when there is an update for the parent
def SetChildStats(RoomStat){
    debuglog RoomStat
    state.roomMap[RoomStat.room] = RoomStat
    state.childTemps[RoomStat.room]= RoomStat.currentTemperature
    state.childSetpoints[RoomStat.room]= RoomStat.setpoint
    state.childVentSize[RoomStat.room]= RoomStat.roomVentArea
    state.childDelta[RoomStat.room]= RoomStat.delta
//    debuglog "Current Room Temperature ${state.childTemps}"
//    debuglog "Current Room Setpoint ${state.childSetpoints}"
//    debuglog "Current Open Vent Area ${state.childVentOpenings}"
}





















// Debug/Logging
def debuglog(statement){   
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 2){log.debug(statement)}
}

def infolog(statement){       
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1){log.info(statement)}
}

def getLogLevels() {
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}
