definition(
    name: "Room",
    namespace: "Parish",
    author: "Parish",
    description: "Room application for 'RoomMaster', do not install directly.",
    category: "My Apps",
    parent: "Parish:RoomMaster",
    iconUrl: "",
    iconX2Url: "",
	iconX3Url	: ""
   )

preferences {page(name: "pageConfig")} 

def pageConfig(){
	dynamicPage(name: "", title: "", install: true, uninstall: true, refreshInterval:0) 
   {

      section("Room Name") {label title: "Enter a name for this room", required: false}    
        
      section("Pause") {input "PauseRoom", "bool", title: "Pause control for this room.", required: true, defaultValue: false, submitOnChange: true}
        
      section("Devices"){
         input "vStat", "capability.thermostat", title: "Zone Virtual Thermostat for setting zone setpoints", required: true
         input "vents", "capability.switchLevel", title: "Zone Vent",multiple: true, required: true
         input "tempSensor", "capability.temperatureMeasurement", title: "Zone Temperature Sensor", multiple: false, required: true
         input "humSensor", "capability.relativeHumidityMeasurement", title: "Zone Humidity Sensor", multiple: false, required: false
         input "luxSensor", "capability.illuminanceMeasurement", title: "Zone Light Sensor", multiple: false, required: false
         input "fan", "capability.fanControl", title: "Zone Fan", multiple: false, required: false
         input "motion", "capability.motionSensor", title: "Zone Motion Sensor", multiple: false, required: false
      }
      section("Settings"){
         input name: "Area", title: "Room Vent Size inÂ²" ,multiple: false ,required: true ,type: "number" ,defaultValue: "38"      
         }

      section("Logging"){
         input(name: "logLevel" ,title: "IDE logging level" ,multiple: false ,required: true ,type: "enum" ,options: getLogLevels() ,submitOnChange: false ,defaultValue: "0")  
	   } 

	}
   }

def installed() {
    initialize()
   }

def updated() {
    unsubscribe()
    initialize()
   }

def initialize(){
	infolog "Init"
	state.clear()
    state.area = Area 
    debuglog "Subscribe to tempSensor"
    subscribe(tempSensor, "temperature", tempHandler)
    debuglog "Getting current Room Temperature" 
    state.currentTemperature = tempSensor.currentValue("temperature")  
    debuglog "Subscribe to vents"
    subscribe(vents, "level", ventHandler)
    debuglog "Getting All Vent Opening"
    state.VentOpeningMap = [:]
    state.ventLevel =0
    vents.each{vent ->
		debuglog "Getting Vent ${vent}"
		state.VentOpeningMap[vent.displayName] =vent.currentValue("level")
        state.ventLevel = (vent.currentValue("level") + state.ventLevel)
        }      
    debuglog "Subscribe to humidity"
    subscribe(humSensor, "humidity", humHandler)
    debuglog "Getting current Zone Humidity" 
    state.currentHumidity = humSensor.currentValue("humidity")    
    debuglog "Subscribe to motion"
    subscribe(motion, "motion.active", motionAHandler)
    debuglog "Getting current Zone Motion" 
    state.currentMotion = motion.currentValue("motion")
    state.occupied = motion.currentValue("motion")
    debuglog "Getting House Thermostat State"
    state.HVACmode = parent.HVACmode() 
    debuglog "Subscribe to Room Thermostat"
    subscribe(vStat, "heatingSetpoint", setTstatHSP)
    subscribe(vStat, "coolingSetpoint", setTstatCSP)
    debuglog "Getting Room Thermostat Setpoint" 
	state.zoneHeatSetpoint = vStat.currentValue("heatingSetpoint")
    state.zoneCoolSetpoint = vStat.currentValue("coolingSetpoint")
    if (state.HVACmode=="HEAT") state.currentSetPoint = state.zoneHeatSetpoint
    else if (state.HVACmode=="COOL") state.currentSetPoint = state.zoneCoolSetpoint
    else state.currentSetPoint = 70
        
    setDelta()
    updateMaster()
	infolog "Done init"    
    
   }

// EVENT HANDLERS
def tempHandler(evt) {
	infolog "Running tempHandler"
	state.currentTemperature = evt.value.toFloat().round(1)
	debuglog "Zone Temperature set to ${state.currentTemperature}"
	updateMaster()
    setDelta()
   }

def humHandler(evt) {
	infolog "Running humHandler"
	state.currentHumidity = evt.value.toFloat().round(1)
	debuglog "Zone Humidity set to ${state.currentHumidity}"
	updateMaster()
   }

def motionAHandler(evt) {
	infolog "Running motionAHandler"
    state.occupied = evt.value
	state.currentMotion = evt.value
	debuglog "Zone Motion set to ${state.currentMotion}"
	updateMaster()
   }

def ventHandler(evt) {
	infolog "Running ventHandler for ${evt.device} value: ${evt.value}"
	infolog "state.VentOpeningMap =  ${state.VentOpeningMap}"
	state.VentOpeningMap = [:]
    state.ventLevel=0
	vents.each{ vent ->
		debuglog "Getting Vent ${vent}"
		state.VentOpeningMap[vent.displayName] =vent.currentValue("level")
        state.ventLevel = (vent.currentValue("level") + state.ventLevel)
	}
	infolog "state.VentOpeningMap after =  ${state.VentOpeningMap}"
    state.ventLevel = (state.ventLevel / state.VentOpeningMap.size())
    debuglog state.VentOpeningMap
	debuglog "${evt.device} was set to ${evt.value}"
    updateMaster()
   }

def setTstatHSP(evt) {
	infolog "Running setTstatHSP"
	zoneHeatSetpoint =evt.value.toFloat()
    state.currentSetPoint = zoneHeatSetpoint
	debuglog "Hot setpoint set to ${zoneHeatSetpoint}"
    updateMaster()
    setDelta()
   }

def setTstatCSP(evt) {
	infolog "Running setTstatCSP"
	zoneColdSetpoint = evt.value.toFloat()
    state.currentSetPoint = zoneColdSetpoint
	debuglog "Cold setpoint set to ${zoneColdSetpoint}"
    updateMaster()
    setDelta()
   }

def MainTstatStateChange(Mode) {
    debuglog "Master Sent thrermostat mode ${Mode}"
    state.HVACmode=Mode
   }

def setDelta(){
    if (state.HVACmode=="HEAT") state.delta = (state.currentSetPoint - state.currentTemperature).toFloat().round(1)
    else if (state.HVACmode=="COOL") state.delta = (state.currentTemperature - state.currentSetPoint).toFloat().round(1)
    else state.delta = 0.0
    debuglog "Current Delta ${state.delta}"
   }

// SEND CHANGES TO PARENT
def updateMaster(){
    infolog "Sending Room Stats to Master"
	Map ChildMap = [:]
    Room = app.label
    debuglog Room
    ChildMap.room = app.label
    ChildMap.setpoint = state.currentSetPoint
    ChildMap.currentTemperature = state.currentTemperature
    ChildMap.currentHumidity = state.currentHumidity
    ChildMap.area = state.area
    ChildMap.occupied = state.occupied
    ChildMap.ventLevel = state.ventLevel
    ChildMap.delta = state.delta   
    debuglog ChildMap
    parent.SetChildStats(ChildMap)   
	infolog "Updated Master"
}

// Debug/Logging
def debuglog(statement){   
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 2){log.debug(statement)}
}

def infolog(statement){       
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1){log.info(statement)}
}

def getLogLevels() {
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}
