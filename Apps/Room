/**
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
 
definition(
    name: "Room",
    namespace: "Parish",
    author: "Parish",
    description: "Room application for 'RoomMaster', do not install directly.",
    category: "My Apps",
    parent: "Parish:RoomMaster",
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/keenect/clipart-thermometer-thermometer-clipart-free-6-thermometer-clip-art-clipartix-free-clipart.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/keenect/clipart-thermometer-thermometer-clipart-free-6-thermometer-clip-art-clipartix-free-clipart.jpg",
	iconX3Url	: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/keenect/clipart-thermometer-thermometer-clipart-free-6-thermometer-clip-art-clipartix-free-clipart.jpg"
       
)

preferences {
    page(name: "pageConfig") // Doing it this way elimiates the default app name/mode options.
}
def pageConfig()
{
	dynamicPage(name: "", title: "", install: true, uninstall: true, refreshInterval:0) {
        section("Versioning") {display()}
    //{
    //    display()
   // }
    section("Room Name") {label title: "Enter a name for this room", required: false}    
        
	section("Pause") {input "PauseRoom", "bool", title: "Pause control for this room.", required: true, defaultValue: false, submitOnChange: true}
        
	section("Devices")
	{
		input "tStat", "capability.thermostat", title: "Zone Virtual Thermostat for setting zone setpoints", required: true
		input name : "UseTstatMode", title : "Use Thermostat Mode to control vents", multiple : false ,required : true, type	: "bool" ,submitOnChange : true, defaultValue : false
		input "vents", "capability.switchLevel", title: "Zone Vent",multiple: true, required: true
		input "tempSensor", "capability.temperatureMeasurement", title: "Zone Temperature Sensor", multiple: false, required: true
        input "humSensor", "capability.relativeHumidityMeasurement", title: "Zone Humidity Sensor", multiple: false, required: false
        input "luxSensor", "capability.illuminanceMeasurement", title: "Zone Light Sensor", multiple: false, required: false
        input "fan", "capability.fanControl", title: "Zone Fan", multiple: false, required: false
        input "motion", "capability.motionSensor", title: "Zone Motion Sensor", multiple: false, required: false
		input "DashboardTileUpdate", "capability.sensor", title: "Display Tile(If wanted):", required: false
	}
	section("Settings")
	{
		input "VentControlType", "enum", title: "How reactive do you want the vents? Aggressive keeps them open wider closer to target, Slow starts closing them further away from target. Binary is full open or close, based on limits.", submitOnChange: true,required : true,defaultValue	: "Normal", options: ["Aggressive", "Normal", "Slow","Binary"]
		input name: "heatMinVo", title : "Heating minimum vent opening" ,multiple	: false ,required : true ,type : "number" ,defaultValue	: "0"
		input name: "heatMaxVo", title : "Heating maximum vent opening" ,multiple	: false ,required : true ,type : "number" ,defaultValue	: "100"
		input name: "coldMinVo", title : "Cooling minimum vent opening" ,multiple	: false ,required : true ,type : "number" ,defaultValue	: "0"
		input name: "coldMaxVo", title : "Cooling maximum vent opening" ,multiple	: false ,required : true ,type : "number" ,defaultValue	: "100"
		input name: "FanVo", title : "Fan mode opening" ,multiple	: false ,required : true ,type : "number" ,defaultValue	: "0"
		input name : "TreatIdleAsFan", title : "Treat Idle as Fan Only?", multiple : false ,required : true, type	: "bool" ,submitOnChange : true, defaultValue : false
        input name: "ventSize", title : "Room Vent Size inÂ²" ,multiple	: false ,required : true ,type : "number" ,defaultValue	: "38"      
	}
        
    section("Logging") {input name: "LogLevel", title: "IDE logging level" ,multiple: false ,required: true ,type: "enum" ,options: getLogLevels() ,submitOnChange: false ,defaultValue: "0"}
        
	}
}

def installed() {initialize()}

def updated()
{
    unsubscribe()
    initialize()
}

def initialize(){
	infolog "Init"
	state.clear()
	debuglog "Subscribe to tempSensor"
	subscribe(tempSensor, "temperature", tempHandler)
	debuglog "Subscribe to vents"
	subscribe(vents, "level", ventHandler)
	debuglog "Subscribe to Tstat"
	subscribe(tStat, "heatingSetpoint", setTstatHSP)
	subscribe(tStat, "coolingSetpoint", setTstatCSP)
	if(UseTstatMode)
	{
		subscribe(tStat, "thermostatMode", setTstatMode)
		debuglog "Getting local virtual Thermostat thermostatMode" 
		state.thermostatMode = tStat.currentValue("thermostatMode").toUpperCase()
	}
	debuglog "Getting Thermostat Heating Setpoint" 
	state.zoneHeatSetpoint = tStat.currentValue("heatingSetpoint")
	debuglog "Getting Thermostat Cooling Setpoint" 
	state.zoneColdSetpoint = tStat.currentValue("coolingSetpoint")
	debuglog "Getting current Zone Temperature" 
	state.currentTemperature = tempSensor.currentValue("temperature")
	debuglog "Getting House Thermostat State and evaluating zone"
	state.mainTstatState = parent.ChildGetMainTstatState()
	debuglog "Getting All Vent Opening"
	state.VentOpeningMap = [:]
	vents.each{ vent ->
		debuglog "Getting Vent ${vent}"
		state.VentOpeningMap[vent.displayName] =vent.currentValue("level")
	}
    zoneEvaluate()
	state.remove("state.VentOpening")
	infolog "Done init"
    state.ventSize = ventSize
}

def setTstatMode(evt)
{
	infolog "Running setTstatMode"
	state.thermostatMode = evt.value.toUpperCase()
	zoneEvaluate()
}

def MainTstatStateChange(mainTStatState) {
	infolog "Running MainTstatStateChange"
	state.mainTstatState = mainTStatState
	zoneEvaluate()
}

def setTstatHSP(evt) {
	infolog "Running setTstatHSP"
	state.zoneHeatSetpoint =evt.value.toFloat()
	debuglog "Hot setpoint set to ${state.zoneHeatSetpoint}"
	zoneEvaluate()
}

def setTstatCSP(evt) {
	infolog "Running setTstatCSP"
	state.zoneColdSetpoint = evt.value.toFloat()
	debuglog "Cold setpoint set to ${state.zoneColdSetpoint}"
	zoneEvaluate()
}

def tempHandler(evt) {
	infolog "Running tempHandler"
	state.currentTemperature = evt.value.toFloat()
	debuglog "Zone Temperature set to ${state.currentTemperature}"
	zoneEvaluate()
}

def ventHandler(evt) {
	infolog "Running ventHandler for ${evt.device} value: ${evt.value}"
	infolog "state.VentOpeningMap =  ${state.VentOpeningMap}"
	state.VentOpeningMap = [:]
	vents.each{ vent ->
		debuglog "Getting Vent ${vent}"
		state.VentOpeningMap[vent.displayName] =vent.currentValue("level")
	}
	infolog "state.VentOpeningMap after =  ${state.VentOpeningMap}"
	//state.VentOpeningMap[vent.displayName] =vent.currentValue("level")
    sendDisplayTile()
	debuglog "${evt.device} was set to ${evt.value}"
}

def zoneEvaluate(){
	infolog "Running zoneEvaluate"
	Map VentParams = [:]
    debuglog "zoneEvaluate: ventmode: ${state.mainTstatState}"
	if ((state.mainTstatState!="IDLE")||TreatIdleAsFan){
		switch (state.mainTstatState){
			case "HEATING" :
				VentParams = SetHeatVentParams()
				break
			case "COOLING" :
				VentParams = SetCoolVentParams()
				break
			case "FAN ONLY" :
				VentParams = SetFanVentParams()
				break
			case "IDLE" :
				VentParams = SetFanVentParams()
				break
			default :
				VentParams = SetErrorVentParams()
				break
				   
		} 
		infolog "zoneEvaluate:Check Tstat Mode"
		CheckTstatMode(VentParams)
		infolog "zoneEvaluate:Calculate Vent Opening"
		CalculteVent(VentParams)
		infolog "zoneEvaluate:Set The Vent"
		state.zoneVoLocal =  VentParams.ventOpening
		setVents(VentParams.ventOpening)
	}
    sendDisplayTile()
    sendStatstoParent() //added from craig
	infolog "zoneEvaluate: --EXIT"
}


def CheckTstatMode(VentParams)
{
	if(UseTstatMode)
	{	
		if (!(state.mainTstatState.contains(state.thermostatMode)||(state.thermostatMode=="AUTO")))
		{
			debuglog "CheckTstatMode: Not in the tstat mode, state.mainTstatState= ${state.mainTstatState} - state.thermostatMode= ${state.thermostatMode}"
			VentParams.tempDelta = 0.1
			VentParams.ventSlope = 0
			VentParams.ventIntercept = VentParams.MinVo
		}
	}
}

def CalculteVent(Map VentParams){
	
	VentParams.ventOpening = Math.round(VentParams.tempDelta*VentParams.ventSlope.toInteger()+VentParams.ventIntercept.toInteger())
	debuglog "CalculteVent- VentParams.ventOpening before limit checks: ${VentParams.ventOpening}"
	if (VentParams.ventOpening>VentParams.MaxVo.toInteger()){
		debuglog "CalculteVent- VentParams.ventOpening greater than Max"
		VentParams.ventOpening = VentParams.MaxVo.toInteger()
	}
	if (VentParams.ventOpening<VentParams.MinVo.toInteger()){
		debuglog"CalculteVent- VentParams.ventOpening less than Min"
		VentParams.ventOpening = VentParams.MinVo.toInteger()
	}
	debuglog "CalculteVent- VentParams.ventOpening after limit checks: ${VentParams.ventOpening}"
	
}

	
def SetCoolVentParams(){
	Map resultMap = [:]
	debuglog "Setting vent Params Cool"
    state.activeSetPoint = state.zoneColdSetpoint
	resultMap.tempDelta = state.currentTemperature - state.zoneColdSetpoint
	debuglog "SetCoolVentParams- resultMap.tempDelta: ${resultMap.tempDelta}"
	debuglog "SetCoolVentParams- Vent Control Set to: ${VentControlType}"
	switch (VentControlType){
			case "Aggressive" :
				resultMap.ventSlope = (coldMaxVo.toInteger()-coldMinVo.toInteger())*2
				resultMap.ventIntercept = (coldMaxVo.toInteger()-coldMinVo.toInteger())/5+coldMinVo.toInteger()
				break
			case "Normal" :
				resultMap.ventSlope = (coldMaxVo.toInteger()-coldMinVo.toInteger())
				resultMap.ventIntercept = coldMinVo.toInteger()
				break
			case "Slow" :
				resultMap.ventSlope = (coldMaxVo.toInteger()-coldMinVo.toInteger())/2
				resultMap.ventIntercept = coldMinVo.toInteger()
				break
			case "Binary" :
				resultMap.ventSlope = 10000
				resultMap.ventIntercept = coldMinVo.toInteger()
				break
			default :
				resultMap.ventSlope = (coldMaxVo.toInteger()-heatMinVo.toInteger())
				resultMap.ventIntercept = coldMinVo.toInteger()
				break
		}
	debuglog "SetCoolVentParams- ventSlope Set to: ${resultMap.ventSlope}"
	debuglog "SetCoolVentParams- ventIntercept Set to: ${resultMap.ventIntercept}"
	resultMap.ventOpening = 50
	resultMap.MaxVo = coldMaxVo
	resultMap.MinVo = coldMinVo
	return resultMap
}

def SetHeatVentParams(){
	Map resultMap = [:]
	debuglog "Setting vent Params Cool"
    state.activeSetPoint = state.zoneHeatSetpoint
	resultMap.tempDelta = state.zoneHeatSetpoint - state.currentTemperature
	debuglog "SetHeatVentParams- resultMap.tempDelta: ${resultMap.tempDelta}"
	debuglog "SetHeatVentParams- Vent Control Set to: ${VentControlType}"
	switch (VentControlType){
			case "Aggressive" :
				resultMap.ventSlope = (heatMaxVo.toInteger()-heatMinVo.toInteger())*2
				resultMap.ventIntercept = (heatMaxVo.toInteger()-heatMinVo.toInteger())/5+heatMinVo.toInteger()
				break
			case "Normal" :
				resultMap.ventSlope = (heatMaxVo.toInteger()-heatMinVo.toInteger())
				resultMap.ventIntercept = heatMinVo.toInteger()
				break
			case "Slow" :
				resultMap.ventSlope = (heatMaxVo.toInteger()-heatMinVo.toInteger())/2
				resultMap.ventIntercept = heatMinVo.toInteger()
				break
			case "Binary" :
				resultMap.ventSlope = 10000
				resultMap.ventIntercept = heatMinVo.toInteger()
				break
			default :
				resultMap.ventSlope = (heatMaxVo.toInteger()-heatMinVo.toInteger())
				resultMap.ventIntercept = heatMinVo.toInteger()
				break
		}
	debuglog "SetHeatVentParams- ventSlope Set to: ${resultMap.ventSlope}"
	debuglog "SetHeatVentParams- ventIntercept Set to: ${resultMap.ventIntercept}"
	
	resultMap.ventOpening = 50
	resultMap.MaxVo = heatMaxVo
	resultMap.MinVo = heatMinVo
	return resultMap
}

def SetFanVentParams(){
	Map resultMap = [:]
	debuglog "Setting vent Params Fan"
	def zoneTempLocal = state.zoneTemp
	resultMap.tempDelta = 0.1
	resultMap.ventSlope = 0
	resultMap.ventIntercept = settings.FanVo.toInteger()
	resultMap.ventOpening = 50
	resultMap.MaxVo = 100
	resultMap.MinVo = 0
	return resultMap
}

def SetErrorVentParams(){
	Map resultMap = [:]
	debuglog "Setting vent Params ERROR"
	resultMap.tempDelta = 0.1
	resultMap.ventSlope = 0	
	resultMap.ventIntercept = 50
	resultMap.ventOpening = 50
	resultMap.MaxVo = 100
	resultMap.MinVo = 0
	return resultMap
}



def setVents(newVo){
	debuglog "Opening Vent to ${newVo}"
	if(!PauseZone){
		vents.each{vent ->
			debuglog "${vent} : ${state.VentOpeningMap[vent.displayName]}"
			if (((state.VentOpeningMap[vent.displayName].toInteger()-newVo.toInteger())>7) || ((state.VentOpeningMap[vent.displayName].toInteger()-newVo.toInteger())<-7)){
				debuglog "Vent was far enough away to move"
				vent.setLevel(newVo)
				runIn(60*1, ventcheck)
			}
		}
	} else{
		debuglog "Zone Paused, not moving the Vents"
	}
}

def ventcheck(){
	//if (state.enabled == true){
    debuglog "ventcheck:enter- "
	setVents(state.zoneVoLocal)
    debuglog "ventcheck:exit- "
	//}
}

def sendDisplayTile()
{
    if(DashboardTileUpdate)
    {
        def reportString = app.label +"<br>"
        reportString += "Mode: "+state.mainTstatState+"<br>"
        reportString += "Setpoint: "+state.activeSetPoint+"<br>"
        reportString += "Temp: "+state.currentTemperature+"<br>"
        
	    vents.each{ vent ->
            reportString += vent.displayName+": "+vent.currentValue("level")+"<br>"
	    }
        debuglog "zoneEvaluate: ${reportString}"
        DashboardTileUpdate.SetKeenectData(reportString)
    }
}

//new definition to send to parent
def sendStatstoParent(){
	Map ChildMap = [:]
    ChildMap.title = app.label
    ChildMap.setpoint = state.activeSetPoint
    ChildMap.currentTemperature = state.currentTemperature
    ChildMap.ventSize = ventSize
    parent.SetChildStats(ChildMap)
}






def debuglog(statement)
{   
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 2)
	{
	  	log.debug(statement)
	}
}
def infolog(statement)
{       
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1)
    {
    	log.info(statement)
    }
}
def getLogLevels(){
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}
def version(){
        unschedule()
        schedule("0 0 9 ? * FRI *", updateCheck) // Cron schedule - How often to perform the update check - (This example is 9am every Friday)
        updateCheck()  
}

def display(){
	updateCheck()
	debuglog "state.Status: ${state.Status}"
        if(state.Status){
        section{paragraph "Version: $state.version -  $state.Copyright"}
        
        if(state.Status != "Current"){
        section{ 
        paragraph "$state.Status"
        paragraph "$state.UpdateInfo"
    }
    }
}
}


def updateCheck(){
    setVersion()
        def paramsUD = [uri: "https://parish99.github.io/Hubitat/versions.json"]   // This is the URI & path to your hosted JSON file
       try {
        httpGet(paramsUD) { respUD ->
//  log.warn " Version Checking - Response Data: ${respUD.data}"   // Troubleshooting Debug Code 
                def copyrightRead = (respUD.data.copyright)
                state.Copyright = copyrightRead
            def newVerRaw = (respUD.data.versions.Application.(state.InternalName))
            def newVer = (respUD.data.versions.Application.(state.InternalName).replace(".", ""))
                def currentVer = state.version.replace(".", "")
                state.UpdateInfo = (respUD.data.versions.UpdateInfo.Application.(state.InternalName))
                state.author = (respUD.data.author)
           
                if(newVer == "NLS"){
            state.Status = "<b>** This app is no longer supported by $state.author  **</b> (But you may continue to use it)"       
            log.warn "** This app is no longer supported by $state.author **"      
                }           
                else if(currentVer < newVer){
        state.Status = "<b>New Version Available (Version: $newVerRaw)</b>"
        log.warn "** There is a newer version of this app available  (Version: $newVerRaw) **"
        log.warn "** $state.UpdateInfo **"
                } 
                else{ 
                state.Status = "Current"
                log.info "You are using the current version of this app"
                }
                                       }
        } 
        catch (e) {
            state.Status = "Error"
        log.error "Something went wrong: CHECK THE JSON FILE AND IT'S URI -  $e"
                }
                
    
        //     
}

def setVersion(){
                state.version = "1.0.0" // Version number of this app
                state.InternalName = "Room"   // this is the name used in the JSON file for this app
				}
